version: '3.1'
services:
  db:
    image: azkaban-db:latest 
    healthcheck:
      test: >
        if [[ $(mysql -u azkaban -pazkaban azkaban -se "select count(*) from executors where active=1;") = 0 ]]; then exit 1; fi
      interval: 30s
      timeout: 20s
      retries: 5
    ports:
      - "3306:3306"
    networks:
      - azkaban
  web:
    image: web-server:latest
    ports:
      - "8081:8081"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - azkaban
  minio:
    image: minio/minio
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${AWS_ACCESS_KEY_ID}
      MINIO_ROOT_PASSWORD: ${AWS_SECRET_ACCESS_KEY}
    command: server --console-address ":9001" /data
    networks:
      - azkaban
    volumes:
      - minio_storage:/data
  mc:
    image: minio/mc
    restart: on-failure
    environment:
      BUCKET: ${ML_BUCKET}
      AWS_ID: ${AWS_ACCESS_KEY_ID}
      AWS_PWD: ${AWS_SECRET_ACCESS_KEY}
    entrypoint:
      - "/bin/sh"
      - "-c"
      - "/usr/bin/mc alias set myminio http://minio:9000 $${AWS_ID} $${AWS_PWD};
        /usr/bin/mc mb --ignore-existing myminio/$${BUCKET};
        /usr/bin/mc policy set public myminio/$${BUCKET};"
    networks:
      - azkaban
    depends_on:
      - minio
  jupyter:
    image: jupyter/datascience-notebook
    user: root
    ports:
      - "8888:8888"
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION}
      GRANT_SUDO: yes
    networks:
      - azkaban
    volumes:
      - notebook_storage:/home/jovyan/work
  pypi:
    image: pypiserver/pypiserver:latest
    ports:
      - "8080:8080"
    command: -P . -a . -o /data/packages
    networks:
      - azkaban
    volumes:
      - pypi_storage:/data/packages
networks:
  azkaban:
    driver: bridge
volumes:
  minio_storage:
    driver_opts:
      type: none
      device: ${PWD}/volumes/minio
      o: bind
  notebook_storage:
    driver_opts:
      type: none
      device: ${PWD}/volumes/notebooks
      o: bind
  pypi_storage:
    driver_opts:
      type: none
      device: ${PWD}/volumes/packages
      o: bind
